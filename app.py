import streamlit as st
import pytesseract
from PIL import Image
import tempfile
import fitz  # PyMuPDF
from openai import OpenAI
from fpdf import FPDF

st.set_page_config(page_title="M√©discope", layout="wide")

# üí° Style CSS pro
st.markdown("""
    <style>
        body { background-color: #F1FAEF; font-family: 'Inter', sans-serif; }
        .title { font-size: 36px; color: #1D3557; font-weight: bold; margin-bottom: 0px; }
        .claim { font-size: 18px; color: #84A98C; margin-top: 0px; }
        .step { font-size: 20px; color: #1D3557; margin-top: 30px; font-weight: bold; }
        .small-text { font-size: 13px; color: gray; }
        .footer { font-size: 12px; color: #999; text-align: center; margin-top: 50px; }
        .stButton > button { background-color: #A8DADC; color: black; border-radius: 5px; padding: 10px 20px; border: none; font-weight: bold; }
    </style>
""", unsafe_allow_html=True)

# Logo et titre
st.image("logo_mediscope.png", width=160)
st.markdown('<div class="title">M√©discope</div>', unsafe_allow_html=True)

# Claim
st.markdown("""
<div class="claim">
<p style="font-size: 20px; color: #1D3557; font-weight: 600; margin-bottom: 0;">
Gagnez du temps dans l‚Äôanalyse des dossiers, concentrez-vous sur l‚Äôessentiel : vos patients.
</p>
<p style="font-size: 16px; color: #555; margin-top: 5px;">
M√©discope automatise l‚Äôanalyse de dossiers m√©dicaux pour produire une synth√®se claire, directement pr√™te √† √™tre transmise √† l‚Äôassurance. Il vous lib√®re du tri et de la lecture fastidieuse des documents, tout en fiabilisant sa d√©marche.
</p>
</div>
""", unsafe_allow_html=True)

# Proposition de valeur
st.markdown("""
<div style="margin-top: 30px; background-color: #FFFFFF; padding: 20px; border-radius: 8px; border: 1px solid #E0E0E0;">
    <h4 style="color: #1D3557; margin-bottom: 10px;">Un outil con√ßu pour les m√©decins conseils, pens√© pour :</h4>
    <ul style="color: #333; font-size: 16px; line-height: 1.6;">
        <li><strong>‚ö° R√©duire de 50 √† 70 %</strong> le temps d‚Äôanalyse des dossiers.</li>
        <li><strong>üßæ Fournir une synth√®se claire, standardis√©e, exportable √† l‚Äôassurance.</strong></li>
    </ul>
</div>
""", unsafe_allow_html=True)

# Authentification √† l'API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# --- Fonctions ---

def extract_text_from_image(image_file):
    image = Image.open(image_file)
    return pytesseract.image_to_string(image, lang='fra')

def extract_text_from_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    text = "\n".join([page.get_text() for page in doc])
    return text

def generate_structured_synthesis(text):
    prompt = (
        f"Tu es un m√©decin conseil expert. Voici un ensemble de documents m√©dicaux bruts :\n"
        f"{text}\n\n"
        "R√©dige une synth√®se m√©dico-l√©gale structur√©e destin√©e √† une compagnie d‚Äôassurance.\n"
        "Le rapport doit comporter les sections suivantes :\n"
        "1. Informations g√©n√©rales du patient\n"
        "2. Rappel des faits et d√©roulement\n"
        "3. Retentissement personnel et professionnel\n"
        "4. Dol√©ances\n"
        "5. Traitements en cours\n"
        "6. Examen clinique\n"
        "7. Discussion m√©dico-l√©gale\n"
        "8. Conclusion (type : date accident, l√©sions, g√™ne, consolidation, DFP, SE, p√©nibilit√©, etc.)\n\n"
        "Le ton doit √™tre formel, pr√©cis, synth√©tique. Utilise des paragraphes courts et num√©rot√©s si n√©cessaire.\n"
        "R√©ponds en fran√ßais."
    )

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4,
    )
    return response.choices[0].message.content

def export_to_pdf(synthesis):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in synthesis.split("\n"):
        pdf.multi_cell(0, 10, txt=line)
    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp.name)
    return temp.name

# --- Interface utilisateur ---

st.markdown('<div class="step">√âtape 1 ‚Äì D√©posez vos documents m√©dicaux</div>', unsafe_allow_html=True)
files = st.file_uploader("üìÅ Formats accept√©s : PDF, JPG, PNG", type=["pdf", "jpg", "jpeg", "png"], accept_multiple_files=True)

if files:
    all_texts = []
    with st.spinner("üß† Analyse en cours..."):
        for file in files:
            if file.type in ["image/jpeg", "image/png"]:
                all_texts.append(extract_text_from_image(file))
            elif file.type == "application/pdf":
                all_texts.append(extract_text_from_pdf(file))
            else:
                st.warning(f"Format non support√© : {file.name}")

    combined_text = "\n\n".join(all_texts)

    st.markdown('<div class="step">√âtape 2 ‚Äì Aper√ßu du texte extrait</div>', unsafe_allow_html=True)
    st.text_area("Texte combin√© extrait des documents", combined_text, height=200)

    st.markdown('<div class="step">√âtape 3 ‚Äì G√©n√©rer la synth√®se IA</div>', unsafe_allow_html=True)
    if st.button("üß¨ G√©n√©rer la synth√®se IA consolid√©e"):
        with st.spinner("üß¨ G√©n√©ration en cours..."):
            synthesis = generate_structured_synthesis(combined_text)
            st.success("‚úÖ Synth√®se g√©n√©r√©e avec succ√®s !")

            st.markdown('<div class="step">√âtape 4 ‚Äì Modifier ou exporter</div>', unsafe_allow_html=True)
            edited = st.text_area("üñäÔ∏è Modifier la synth√®se", synthesis, height=500)

            if st.button("üì§ Exporter en PDF"):
                pdf_path = export_to_pdf(edited)
                with open(pdf_path, "rb") as f:
                    st.download_button("üì• T√©l√©charger la synth√®se PDF", f, file_name="synthese_medicale.pdf")

# Footer
st.markdown('<div class="footer">¬© 2025 M√©discope ¬∑ Version MVP ¬∑ Produit en test ‚Äì ne pas diffuser sans accord</div>', unsafe_allow_html=True)
