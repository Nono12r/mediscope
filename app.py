import streamlit as st
import pytesseract
from PIL import Image
import tempfile
import fitz  # PyMuPDF
from openai import OpenAI
from fpdf import FPDF

st.set_page_config(page_title="M√©discope", layout="wide")

# üí° Style CSS pro
st.markdown("""
    <style>
        body { background-color: #F1FAEF; font-family: 'Inter', sans-serif; }
        .title { font-size: 36px; color: #1D3557; font-weight: bold; margin-bottom: 0px; }
        .claim { font-size: 18px; color: #84A98C; margin-top: 0px; }
        .step { font-size: 20px; color: #1D3557; margin-top: 30px; font-weight: bold; }
        .small-text { font-size: 13px; color: gray; }
        .footer { font-size: 12px; color: #999; text-align: center; margin-top: 50px; }
        .stButton > button { background-color: #A8DADC; color: black; border-radius: 5px; padding: 10px 20px; border: none; font-weight: bold; }
    </style>
""", unsafe_allow_html=True)

# Logo et titre
st.image("logo_mediscope.png", width=160)
st.markdown('<div class="title">M√©discope</div>', unsafe_allow_html=True)

# Claim
st.markdown("""
<div class="claim">
<p style="font-size: 20px; color: #1D3557; font-weight: 600; margin-bottom: 0;">
Gagnez du temps dans l‚Äôanalyse des dossiers, concentrez-vous sur l‚Äôessentiel : vos patients.
</p>
<p style="font-size: 16px; color: #555; margin-top: 5px;">
M√©discope automatise l‚Äôanalyse de dossiers m√©dicaux pour produire une synth√®se claire, directement pr√™te √† √™tre transmise √† l‚Äôassurance.
</p>
</div>
""", unsafe_allow_html=True)

# Initialisation OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# OCR et lecture PDF
def extract_text_from_image(image_file):
    image = Image.open(image_file)
    return pytesseract.image_to_string(image, lang='fra', config='--psm 6')

def extract_text_from_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    text = "\n".join([page.get_text() for page in doc])
    return text

# Analyse des infos manquantes
def check_infos(text: str) -> list:
    required_fields = {
        "Nom": ["nom", "patient", "monsieur", "madame"],
        "Date de naissance": ["n√© le", "date de naissance"],
        "Date de l‚Äôaccident": ["accident", "avp", "traumatisme", "collision"],
        "Examen clinique": ["examen clinique", "amplitude", "√©paule", "rachis", "rotation"],
        "Traitement suivi": ["kin√©sith√©rapie", "immobilisation", "orth√®se", "m√©dicament"],
        "Date de consolidation": ["consolidation", "reprise", "stabilisation"],
        "DFP": ["d√©ficit fonctionnel", "DFP", "%"],
        "Souffrances endur√©es": ["souffrances", "SE", "sur 7"],
        "Profession": ["profession", "travail", "carreleur", "activit√© professionnelle"],
    }
    missing_fields = []
    text_lower = text.lower()
    for label, keywords in required_fields.items():
        if not any(keyword in text_lower for keyword in keywords):
            missing_fields.append(label)
    return missing_fields

# G√©n√©ration IA
def generate_structured_synthesis_safe(text, missing_fields):
    liste_champs = ", ".join(missing_fields)
    prompt = f"""
Tu es un m√©decin expert en dommage corporel.

Voici un extrait de dossier m√©dical √† analyser :

{text}

---

‚ö†Ô∏è Informations absentes ou incompl√®tes : {liste_champs if missing_fields else 'aucune'}.

‚û°Ô∏è Si certaines donn√©es sont absentes, **ne les invente jamais**. Mentionne explicitement "Information absente du dossier" ou "√Ä rechercher" dans la section concern√©e.

R√©dige un **rapport m√©dico-l√©gal structur√©** selon ce plan :

1. Informations personnelles
2. Mission et contexte
3. √âtat ant√©rieur
4. Rappel chronologique des faits
5. Traitements suivis
6. Retentissement personnel
7. Retentissement professionnel
8. Dol√©ances actuelles
9. Examen clinique
10. Discussion m√©dico-l√©gale
11. Conclusion m√©dico-l√©gale : 
    - Date de l'accident
    - L√©sions identifi√©es
    - Date de consolidation
    - G√®nes temporaires
    - Assistance par tierce personne
    - DFP (%)
    - SE (/7)
    - P√©nibilit√©
    - Dommages esth√©tiques / d‚Äôagr√©ment

Tu dois √™tre rigoureux, synth√©tique, factuel et **ne jamais supposer des √©l√©ments non pr√©sents**.
R√©ponds en fran√ßais.
"""
    response = client.chat.completions.create(
        model="gpt-4" ,  # ‚úÖ Version √©conomique
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
    )
    return response.choices[0].message.content

# Export PDF
def export_to_pdf(synthesis):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in synthesis.split("\n"):
        pdf.multi_cell(0, 10, txt=line)
    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp.name)
    return temp.name

# Interface utilisateur
st.markdown('<div class="step">√âtape 1 ‚Äì D√©posez vos documents m√©dicaux</div>', unsafe_allow_html=True)
files = st.file_uploader("üìÅ Formats accept√©s : PDF, JPG, PNG", type=["pdf", "jpg", "jpeg", "png"], accept_multiple_files=True)

if files:
    all_texts = []
    with st.spinner("üß† Analyse en cours..."):
        for file in files:
            if file.type in ["image/jpeg", "image/png"]:
                all_texts.append(extract_text_from_image(file))
            elif file.type == "application/pdf":
                all_texts.append(extract_text_from_pdf(file))
            else:
                st.warning(f"Format non support√© : {file.name}")

    combined_text = "\n\n".join(all_texts)
    missing_fields = check_infos(combined_text)

    st.markdown('<div class="step">√âtape 2 ‚Äì Aper√ßu du texte extrait</div>', unsafe_allow_html=True)
    st.text_area("Texte combin√© extrait des documents", combined_text, height=200)

    if missing_fields:
        st.warning(f"‚ö†Ô∏è Informations manquantes : {', '.join(missing_fields)}")
        st.info("‚ÑπÔ∏è La synth√®se IA indiquera explicitement les champs absents sans les inventer.")

    st.markdown('<div class="step">√âtape 3 ‚Äì G√©n√©rer la synth√®se IA</div>', unsafe_allow_html=True)
    if st.button("üß¨ G√©n√©rer la synth√®se IA consolid√©e"):
        with st.spinner("üß¨ G√©n√©ration en cours..."):
            synthesis = generate_structured_synthesis_safe(combined_text, missing_fields)
            st.success("‚úÖ Synth√®se g√©n√©r√©e avec succ√®s")
            st.markdown('<div class="step">√âtape 4 ‚Äì Modifier ou exporter</div>', unsafe_allow_html=True)
            edited = st.text_area("üñäÔ∏è Modifier la synth√®se", synthesis, height=500)
            if st.button("üì§ Exporter en PDF"):
                pdf_path = export_to_pdf(edited)
                with open(pdf_path, "rb") as f:
                    st.download_button("üì• T√©l√©charger la synth√®se PDF", f, file_name="synthese_medicale.pdf")

# Footer
st.markdown('<div class="footer">¬© 2025 M√©discope ¬∑ Version MVP ¬∑ Produit en test ‚Äì ne pas diffuser sans accord</div>', unsafe_allow_html=True)
