import streamlit as st
import pytesseract
from PIL import Image
import tempfile
import fitz  # PyMuPDF
from openai import OpenAI
from fpdf import FPDF

st.set_page_config(page_title="M√©discope", layout="wide")

if "docs" not in st.session_state:
    st.session_state["docs"] = []
if "syntheses" not in st.session_state:
    st.session_state["syntheses"] = []

st.title("M√©discope ‚Äì Analyse progressive de documents m√©dicaux")

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

def extract_text_from_image(image_file):
    image = Image.open(image_file)
    return pytesseract.image_to_string(image, lang='fra', config='--psm 6')

def extract_text_from_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    text = "\n".join([page.get_text() for page in doc])
    return text

def check_infos(text: str) -> list:
    required_fields = {
        "Nom": ["nom", "patient", "monsieur", "madame"],
        "Date de naissance": ["n√© le", "date de naissance"],
        "Date de l‚Äôaccident": ["accident", "avp", "traumatisme", "collision"],
        "Examen clinique": ["examen clinique", "amplitude", "√©paule", "rachis", "rotation"],
        "Traitement suivi": ["kin√©sith√©rapie", "immobilisation", "orth√®se", "m√©dicament"],
        "Date de consolidation": ["consolidation", "reprise", "stabilisation"],
        "DFP": ["d√©ficit fonctionnel", "DFP", "%"],
        "Souffrances endur√©es": ["souffrances", "SE", "sur 7"],
        "Profession": ["profession", "travail", "carreleur", "activit√© professionnelle"],
    }
    missing_fields = []
    text_lower = text.lower()
    for label, keywords in required_fields.items():
        if not any(keyword in text_lower for keyword in keywords):
            missing_fields.append(label)
    return missing_fields

def generate_structured_synthesis_safe(text, missing_fields):
    max_input_length = 8000
    if len(text) > max_input_length:
        text = text[:max_input_length]
        st.warning("Le texte a √©t√© tronqu√© pour rester dans les limites de GPT-4.")

    liste_champs = ", ".join(missing_fields)
    infos_text = f"Informations absentes ou incompl√®tes : {liste_champs if missing_fields else 'aucune'}."

    prompt = f"""
Tu es un m√©decin expert en dommage corporel.

Voici un extrait de dossier m√©dical √† analyser :

{text}

---

{infos_text}

Si certaines donn√©es sont absentes, ne les invente jamais. Mentionne explicitement "Information absente du dossier" ou "√Ä rechercher" dans la section concern√©e.

R√©dige un rapport m√©dico-l√©gal structur√© selon ce plan :

1. Informations personnelles
2. Mission et contexte
3. √âtat ant√©rieur
4. Rappel chronologique des faits
5. Traitements suivis
6. Retentissement personnel
7. Retentissement professionnel
8. Dol√©ances actuelles
9. Examen clinique
10. Discussion m√©dico-l√©gale
11. Conclusion m√©dico-l√©gale : 
    - Date de l'accident
    - L√©sions identifi√©es
    - Date de consolidation
    - G√®nes temporaires
    - Assistance par tierce personne
    - DFP (%)
    - SE (/7)
    - P√©nibilit√©
    - Dommages esth√©tiques / d‚Äôagr√©ment

Tu dois √™tre rigoureux, synth√©tique, factuel et ne jamais supposer des √©l√©ments non pr√©sents.
R√©ponds en fran√ßais.
"""

    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
    )

    output = response.choices[0].message.content
    estimated_tokens = len(prompt) // 4 + len(output) // 4
    estimated_cost = (estimated_tokens / 1000) * 0.04
    st.caption(f"Co√ªt estim√© de cette synth√®se : {estimated_cost:.3f} $")
    return output

def generate_final_summary(syntheses):
    prompt = "Voici plusieurs synth√®ses m√©dicales issues d‚Äôun m√™me dossier :\n\n"
    for i, s in enumerate(syntheses):
        prompt += f"Synth√®se {i+1}:\n{s}\n\n"
    prompt += "\nR√©dige une synth√®se m√©dico-l√©gale globale et coh√©rente selon le m√™me plan."

    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
    )
    return response.choices[0].message.content

def export_to_pdf(synthesis):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in synthesis.split("\n"):
        pdf.multi_cell(0, 10, txt=line)
    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp.name)
    return temp.name

st.header("√âtape 1 ‚Äì D√©poser un document √† la fois")
file = st.file_uploader("üìÅ Charger un fichier (PDF, JPG, PNG)", type=["pdf", "jpg", "jpeg", "png"])

if file and st.button("Analyser ce document"):
    with st.spinner("üìÑ Analyse du document en cours..."):
        if file.type in ["image/jpeg", "image/png"]:
            text = extract_text_from_image(file)
        elif file.type == "application/pdf":
            text = extract_text_from_pdf(file)
        else:
            st.warning("Format non support√©.")
            text = ""

        if text:
            missing = check_infos(text)
            synth = generate_structured_synthesis_safe(text, missing)
            st.session_state.docs.append(file.name)
            st.session_state.syntheses.append(synth)
            st.success(f"Synth√®se ajout√©e pour {file.name}")
            st.text_area(f"Synth√®se g√©n√©r√©e ({file.name})", synth, height=300)

if st.session_state.syntheses:
    st.header("√âtape 2 ‚Äì Fusionner toutes les synth√®ses")
    if st.button("üß© G√©n√©rer la synth√®se m√©dico-l√©gale finale"):
        with st.spinner("Fusion des synth√®ses en cours..."):
            final_report = generate_final_summary(st.session_state.syntheses)
            st.success("Synth√®se finale g√©n√©r√©e !")
            edited = st.text_area("üñäÔ∏è Modifier la synth√®se finale", final_report, height=500)
            if st.button("üì• Exporter en PDF"):
                pdf_path = export_to_pdf(edited)
                with open(pdf_path, "rb") as f:
                    st.download_button("üì• T√©l√©charger la synth√®se PDF", f, file_name="synthese_finale.pdf")
