import streamlit as st
import pytesseract
from PIL import Image
import tempfile
import fitz
from openai import OpenAI
from fpdf import FPDF
import io

st.set_page_config(page_title="M√©discope", layout="wide")

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

if "syntheses" not in st.session_state:
    st.session_state.syntheses = []
if "documents" not in st.session_state:
    st.session_state.documents = []
if "final_synthesis" not in st.session_state:
    st.session_state.final_synthesis = None

st.title("ü©∫ M√©discope ‚Äì Analyse m√©dico-l√©gale progressive")

st.markdown("""
Bienvenue dans l‚Äôinterface M√©discope. D√©posez vos documents m√©dicaux **un par un**, obtenez une **synth√®se m√©dicale experte √† chaque √©tape**, puis fusionnez-les en un **rapport final structur√©**.
""")

# Extraction OCR ou texte direct
def extract_text(file):
    if file.type.startswith("image"):
        image = Image.open(file)
        text = pytesseract.image_to_string(image, lang='fra', config='--psm 6')
        return text + "\n[Source : image analys√©e par OCR]"

    elif file.type == "application/pdf":
        doc = fitz.open(stream=file.read(), filetype="pdf")
        full_text = ""
        for page_number, page in enumerate(doc):
            text = page.get_text()
            if text.strip():
                full_text += f"\n--- Page {page_number+1} : texte direct ---\n{text}\n"
            else:
                pix = page.get_pixmap(dpi=300)
                image_bytes = io.BytesIO(pix.tobytes("png"))
                image = Image.open(image_bytes)
                ocr_text = pytesseract.image_to_string(image, lang='fra', config='--psm 6')
                full_text += f"\n--- Page {page_number+1} : texte OCR ---\n{ocr_text}\n"
        return full_text.strip()

    else:
        return "[Format non support√© ou erreur d'ouverture du fichier]"


# Synth√®se IA segment√©e
def generate_structured_synthesis(text):
    prompt = f"""
Tu es un m√©decin expert en dommage corporel. Voici un extrait de dossier m√©dical √† analyser :

{text}

R√©dige une synth√®se m√©dico-l√©gale structur√©e selon le plan suivant :
1. Informations personnelles
2. Mission et contexte
3. √âtat ant√©rieur
4. Rappel chronologique des faits
5. Traitements suivis
6. Retentissement personnel
7. Retentissement professionnel
8. Dol√©ances actuelles
9. Examen clinique
10. Discussion m√©dico-l√©gale
11. Conclusion m√©dico-l√©gale

Mentionne explicitement les informations absentes. Sois rigoureux, structur√© et professionnel.
R√©ponds en fran√ßais.
"""
    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
    )
    return response.choices[0].message.content

# Fusion finale des synth√®ses
def generate_final_synthesis(syntheses):
    prompt = "Voici plusieurs synth√®ses m√©dicales individuelles issues d‚Äôun dossier complet :\n\n"
    for i, s in enumerate(syntheses):
        prompt += f"Synth√®se {i+1} :\n{s}\n\n"
    prompt += "\nR√©dige une synth√®se m√©dico-l√©gale unique, rigoureuse, coh√©rente, selon le plan habituel."

    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
    )
    return response.choices[0].message.content

# Export PDF
def export_to_pdf(text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)
    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp.name)
    return temp.name

st.header("√âtape en cours ‚Äì D√©posez un nouveau document m√©dical")
file = st.file_uploader("üìÅ Ajouter un document (PDF, JPG, PNG)", type=["pdf", "jpg", "jpeg", "png"])

if file and st.button("Analyser ce document"):
    with st.spinner("üîç Lecture et extraction en cours..."):
        text = extract_text(file)
        if text.strip():
            synthesis = generate_structured_synthesis(text)
            st.session_state.documents.append(file.name)
            st.session_state.syntheses.append(synthesis)
            st.success(f"‚úÖ Synth√®se g√©n√©r√©e pour {file.name}")
            st.text_area(f"üìù Synth√®se du document : {file.name}", synthesis, height=350)
        else:
            st.error("‚ùå Impossible d'extraire du texte depuis ce document.")

# Liste des synth√®ses g√©n√©r√©es
if st.session_state.syntheses:
    st.header("üìö Synth√®ses g√©n√©r√©es")
    for i, synth in enumerate(st.session_state.syntheses):
        st.text_area(f"Synth√®se {i+1} ‚Äì {st.session_state.documents[i]}", synth, height=300)

    # Fusion finale
    st.header("üß© √âtape finale ‚Äì G√©n√©rer le rapport consolid√©")
    if st.button("Fusionner toutes les synth√®ses"):
        with st.spinner("Fusion intelligente des synth√®ses..."):
            final = generate_final_synthesis(st.session_state.syntheses)
            st.session_state.final_synthesis = final
            st.success("‚úÖ Rapport final pr√™t")

    if st.session_state.final_synthesis:
        st.text_area("üñäÔ∏è Modifier la synth√®se finale consolid√©e", st.session_state.final_synthesis, height=500)
        if st.button("üì§ T√©l√©charger le rapport final en PDF"):
            pdf_path = export_to_pdf(st.session_state.final_synthesis)
            with open(pdf_path, "rb") as f:
                st.download_button("üì• T√©l√©charger le PDF", f, file_name="synthese_medico_legale_finale.pdf")
